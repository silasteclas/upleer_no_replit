// FASE 6 - Script de Migra√ß√£o de Dados Existentes
// Este script calcula e adiciona dados financeiros para produtos j√° cadastrados

import { drizzle } from 'drizzle-orm/neon-serverless';
import { neonConfig, Pool } from '@neondatabase/serverless';
import { eq, isNull, or } from 'drizzle-orm';
import { products } from '../shared/schema.js';

// Configurar Neon
if (process.env.NODE_ENV !== 'production') {
  neonConfig.wsProxy = (host) => `${host}:5433/v1`;
  neonConfig.useSecureWebSocket = false;
  neonConfig.pipelineThroughput = 0;
  neonConfig.pipelineConnect = false;
}

// Conectar ao banco
const pool = new Pool({ connectionString: process.env.DATABASE_URL });
const db = drizzle(pool);

console.log('üîÑ FASE 6 - MIGRA√á√ÉO DE DADOS EXISTENTES');
console.log('====================================================');

// Fun√ß√£o para calcular dados financeiros baseados no salePrice existente
function calculateFinancialData(salePrice, pageCount) {
  // Usar reverse engineering do salePrice atual para calcular authorEarnings
  // F√≥rmula original: salePrice = authorEarnings + platformCommission
  // platformCommission = fixedFee + printingCost + commission
  // commission = authorEarnings * 0.30
  
  const fixedFee = 9.90;
  const printingCostPerPage = 0.10;
  const commissionRate = 30.00; // 30%
  
  const printingCost = pageCount * printingCostPerPage;
  
  // Resolver equa√ß√£o: salePrice = authorEarnings + fixedFee + printingCost + (authorEarnings * 0.30)
  // salePrice = authorEarnings * 1.30 + fixedFee + printingCost
  // authorEarnings = (salePrice - fixedFee - printingCost) / 1.30
  
  const baseCosts = fixedFee + printingCost;
  const authorEarnings = Math.max(0, (salePrice - baseCosts) / 1.30);
  
  const commissionAmount = authorEarnings * (commissionRate / 100);
  const platformCommission = fixedFee + printingCost + commissionAmount;
  
  return {
    authorEarnings: parseFloat(authorEarnings.toFixed(2)),
    platformCommission: parseFloat(platformCommission.toFixed(2)),
    fixedFee: fixedFee,
    printingCostPerPage: printingCostPerPage,
    commissionRate: commissionRate
  };
}

async function migrateExistingProducts() {
  try {
    console.log('\nüìä ETAPA 1: An√°lise dos Produtos Existentes');
    console.log('--------------------------------------------------');
    
    // Buscar produtos que n√£o t√™m dados financeiros
    const productsToMigrate = await db
      .select()
      .from(products)
      .where(
        or(
          isNull(products.authorEarnings),
          isNull(products.platformCommission)
        )
      );
    
    console.log(`üìã Produtos encontrados para migra√ß√£o: ${productsToMigrate.length}`);
    
    if (productsToMigrate.length === 0) {
      console.log('‚úÖ Todos os produtos j√° possuem dados financeiros!');
      return { migrated: 0, skipped: 0 };
    }
    
    console.log('\nüîß ETAPA 2: Backup e Valida√ß√£o');
    console.log('--------------------------------------------------');
    
    // Criar backup dos dados atuais
    const backupData = productsToMigrate.map(product => ({
      id: product.id,
      title: product.title,
      salePrice: product.salePrice,
      pageCount: product.pageCount,
      marginPercent: product.marginPercent,
      baseCost: product.baseCost
    }));
    
    console.log(`üíæ Backup criado para ${backupData.length} produtos`);
    console.log('   Dados backup salvos na mem√≥ria para rollback');
    
    console.log('\nüîÑ ETAPA 3: C√°lculo e Migra√ß√£o');
    console.log('--------------------------------------------------');
    
    let migratedCount = 0;
    let skippedCount = 0;
    
    for (const product of productsToMigrate) {
      try {
        const salePrice = parseFloat(product.salePrice) || 0;
        const pageCount = parseInt(product.pageCount) || 1;
        
        // Validar dados b√°sicos
        if (salePrice <= 0) {
          console.log(`‚ö†Ô∏è  Produto ${product.id} - Pre√ßo inv√°lido (R$ ${salePrice}), pulando...`);
          skippedCount++;
          continue;
        }
        
        if (pageCount <= 0) {
          console.log(`‚ö†Ô∏è  Produto ${product.id} - P√°ginas inv√°lidas (${pageCount}), usando 1...`);
        }
        
        // Calcular dados financeiros
        const financialData = calculateFinancialData(salePrice, Math.max(pageCount, 1));
        
        // Atualizar produto
        await db
          .update(products)
          .set({
            authorEarnings: financialData.authorEarnings.toString(),
            platformCommission: financialData.platformCommission.toString(),
            fixedFee: financialData.fixedFee.toString(),
            printingCostPerPage: financialData.printingCostPerPage.toString(),
            commissionRate: financialData.commissionRate.toString(),
            updatedAt: new Date()
          })
          .where(eq(products.id, product.id));
        
        console.log(`‚úÖ Produto ${product.id} (${product.title})`);
        console.log(`   üìÑ P√°ginas: ${pageCount}`);
        console.log(`   üí∞ Pre√ßo original: R$ ${salePrice.toFixed(2)}`);
        console.log(`   üéØ Ganho autor: R$ ${financialData.authorEarnings.toFixed(2)}`);
        console.log(`   üè¢ Ganho plataforma: R$ ${financialData.platformCommission.toFixed(2)}`);
        console.log(`   ‚ú® Verifica√ß√£o: R$ ${(financialData.authorEarnings + financialData.platformCommission).toFixed(2)} = R$ ${salePrice.toFixed(2)}`);
        
        migratedCount++;
        
        // Pausa pequena para n√£o sobrecarregar o banco
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        console.error(`‚ùå Erro ao migrar produto ${product.id}:`, error.message);
        skippedCount++;
      }
    }
    
    console.log('\nüéØ ETAPA 4: Valida√ß√£o P√≥s-Migra√ß√£o');
    console.log('--------------------------------------------------');
    
    // Verificar produtos migrados
    const migratedProducts = await db
      .select()
      .from(products)
      .where(eq(products.id, productsToMigrate[0]?.id))
      .limit(5);
    
    if (migratedProducts.length > 0) {
      console.log('‚úÖ Amostra de produtos migrados:');
      migratedProducts.forEach(product => {
        const authorEarnings = parseFloat(product.authorEarnings || '0');
        const platformCommission = parseFloat(product.platformCommission || '0');
        const total = authorEarnings + platformCommission;
        const originalPrice = parseFloat(product.salePrice) || 0;
        const difference = Math.abs(total - originalPrice);
        
        console.log(`   üì¶ ${product.title}`);
        console.log(`      üí∞ Autor: R$ ${authorEarnings.toFixed(2)} | Plataforma: R$ ${platformCommission.toFixed(2)}`);
        console.log(`      üîç Total: R$ ${total.toFixed(2)} | Original: R$ ${originalPrice.toFixed(2)} | Diferen√ßa: R$ ${difference.toFixed(2)}`);
      });
    }
    
    return { migrated: migratedCount, skipped: skippedCount, backup: backupData };
    
  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error);
    throw error;
  }
}

async function validateMigration() {
  console.log('\nüîç ETAPA 5: Valida√ß√£o Completa');
  console.log('--------------------------------------------------');
  
  try {
    // Verificar produtos sem dados financeiros
    const incompleteProducts = await db
      .select()
      .from(products)
      .where(
        or(
          isNull(products.authorEarnings),
          isNull(products.platformCommission)
        )
      );
    
    console.log(`üìä Produtos sem dados financeiros: ${incompleteProducts.length}`);
    
    // Verificar consist√™ncia dos c√°lculos
    const allProducts = await db.select().from(products);
    let consistentCount = 0;
    let inconsistentCount = 0;
    
    for (const product of allProducts) {
      if (product.authorEarnings && product.platformCommission && product.salePrice) {
        const authorEarnings = parseFloat(product.authorEarnings);
        const platformCommission = parseFloat(product.platformCommission);
        const calculatedTotal = authorEarnings + platformCommission;
        const originalPrice = parseFloat(product.salePrice);
        const difference = Math.abs(calculatedTotal - originalPrice);
        
        if (difference < 0.01) { // Toler√¢ncia de 1 centavo
          consistentCount++;
        } else {
          inconsistentCount++;
          if (inconsistentCount <= 3) { // Mostrar apenas os primeiros 3 inconsistentes
            console.log(`‚ö†Ô∏è  Inconsist√™ncia detectada no produto ${product.id}:`);
            console.log(`    Calculado: R$ ${calculatedTotal.toFixed(2)} | Original: R$ ${originalPrice.toFixed(2)}`);
          }
        }
      }
    }
    
    console.log(`‚úÖ Produtos consistentes: ${consistentCount}`);
    console.log(`‚ö†Ô∏è  Produtos inconsistentes: ${inconsistentCount}`);
    
    return {
      totalProducts: allProducts.length,
      incompleteProducts: incompleteProducts.length,
      consistentProducts: consistentCount,
      inconsistentProducts: inconsistentCount
    };
    
  } catch (error) {
    console.error('‚ùå Erro durante valida√ß√£o:', error);
    throw error;
  }
}

// Executar migra√ß√£o
async function runMigration() {
  console.log('üöÄ INICIANDO MIGRA√á√ÉO DE DADOS EXISTENTES...\n');
  
  try {
    // Executar migra√ß√£o
    const migrationResult = await migrateExistingProducts();
    
    // Validar resultados
    const validationResult = await validateMigration();
    
    // Relat√≥rio final
    console.log('\nüìä RELAT√ìRIO FINAL - FASE 6');
    console.log('====================================================');
    console.log(`‚úÖ Produtos migrados: ${migrationResult.migrated}`);
    console.log(`‚ö†Ô∏è  Produtos ignorados: ${migrationResult.skipped}`);
    console.log(`üìä Total de produtos: ${validationResult.totalProducts}`);
    console.log(`üîç Produtos consistentes: ${validationResult.consistentProducts}`);
    console.log(`‚ö†Ô∏è  Produtos inconsistentes: ${validationResult.inconsistentProducts}`);
    
    if (migrationResult.migrated > 0) {
      console.log('\nüéâ FASE 6 - MIGRA√á√ÉO: CONCLU√çDA COM SUCESSO!');
      console.log('üìà Dados financeiros calculados e aplicados aos produtos existentes');
      console.log('üîÑ Sistema totalmente integrado - produtos antigos e novos');
    } else {
      console.log('\n‚úÖ FASE 6 - MIGRA√á√ÉO: NENHUMA A√á√ÉO NECESS√ÅRIA');
      console.log('üìä Todos os produtos j√° possuem dados financeiros');
    }
    
    // Fechar conex√£o
    await pool.end();
    
    return true;
    
  } catch (error) {
    console.error('\n‚ùå FALHA NA MIGRA√á√ÉO:', error);
    await pool.end();
    return false;
  }
}

// Executar
runMigration().then(success => {
  if (success) {
    console.log('\nüéä MIGRA√á√ÉO COMPLETA E VALIDADA!');
    process.exit(0);
  } else {
    console.log('\n‚ö†Ô∏è  REVISAR MIGRA√á√ÉO');
    process.exit(1);
  }
}).catch(error => {
  console.error('\n‚ùå Erro cr√≠tico durante migra√ß√£o:', error);
  process.exit(1);
}); 